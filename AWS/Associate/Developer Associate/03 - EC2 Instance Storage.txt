EC2 Instance Storage:
--------------------

What's an EBS Volume?
--------------------
- An EBS (Elastic Block Store) Volume is a network drive you can attach to your instance while they run. We use them without even knowing.
- It allows your instances to persist data, even after their termination. This makes it possible to re-start/re-create an instance and mount it with the same EBS volume from before and we will get back our data.
- They can only be mounted to one instance at a time (at the CCP level). One EBS instance cannot be attached to two EC2 instances at the same time at CCP level.
- CCP - Certified Cloud Practitioner - one EBS can be only mounted to one EC2 instance.
- Associate Level (Solutions Architect, Developer, SysOps): "multi-attach" feature for some EBS.
- Multiple EBS instances can be attached with two EC2 instances.
- They are bound to a specific availibility zone (AZ). So, a EBS created in one AZ cannot be used in another AZ.
- Analogy: Think of them as a "network USB stick". A USB stick which you can take from one computer and connect to another computer, but it is not physically attached to the computer but attached thorugh the network.
- Free tier: 30 GB of free EBS storage of type General Purpose (gp2 SSD) or Magnetic per month.

EBS Volume:
----------
- It's a network drive (i.e. not a physical drive)
	o It uses the network to communicate the instance, which means there might be a bit of latency.
	o It can be detached from an EC2 instance and attached to another one quickly.
- It's locked to an AZ.
	o An EBS Vloume in us-east-1a cannot be attached to us-east-1b.
	o To move a vlume across, you first need to snapshot it.
- It is a volume, so we need to have a provisioned capacity.
	o Size in GBs.
	o IOPS (IO operations Per Second)
- You get billed for all the provisional capacity.
- You can increase the capacity of the drive over time. 

EBS - Delete on Termination attribute:
-------------------------------------
- Control the EBS behaviour when an EC2 instance terminates.
	o By default, the root EBS volume is deleted (attribute enabled) [We can mark it as disabled at the time of Launching a new Instance in the Storage section.]
	o By default, any other attached EBS volume is not deleted (attribute disabled)
- This can be controlled by the AWS console/AWS CLI.
- Use case: preserve root volume when instance is terminated to save some data.

-----------------------------------

EBS Snapshots:
-------------
- Make a backup (snapshot) of your EBS volume at a point in time.
- Not necessary to detach volume to do snapshot, but recommended.
- Can copy snapshots across AZ or Region. So, we can take a snapshot of a EBS in one AZ and then restore that snapshot to another EBS in another AZ and that is how we can transfer the data from one EBS in one AZ to another EBS in another AZ.

EBS Snapshots Features:
----------------------
- EBS Snapshot Archive (Standard by default) [Got to actions and select Archive Snapshots]
	o Move a Snapshot to an "archive tier" that is 75% cheaper.
	o Takes within 24 to 72 hours for restoring the archive.
- Recycle Bin for EBS Snapshots
	o Setup rules to retain deleted snapshots so you can recover them after an accidental deletion.
	o Specify retention (fron 1 day to 1 year)
- Fast Snapshot Restore (FSR)
	o Force full initialization of snapshot to have no latency on the first use ($$$)
- Once a Snapshot is created, we can copy it over to any other region. This works great as a disaster recovery strategy as the data is backed up in another region in AWS.
	
-----------------------------------

AMI:
---
- This powers our EC2 instances.
- AMI = Amazon Machine Image
- AMI are a customization of an EC2 instance.
	o You add your own software, configuration, operating system, monitoring...
	o Faster boot/configuration time because all your software is pre-packaged.
- AMI are built for a specific region (and can be copied across regions)
- You can launch EC2 insances from:
	o A public AMI: AWS provided
	o Your own AMI: you make and maintain them yourself
	o An AWS Marketplace AMI: an AMI someone else made (and potentially sells)

AMI Process (from an EC2 instance):
----------------------------------
- Start an EC2 instance and customize it.
- Stop the instance (for data integrity)
- Build an AMI - this will also create EBS snapshots.
- Launch instances from other AMIs.

	ap-south-1a -(Create AMI)-> Custom AMI -(Launch from AMI)-> ap-south-1b

Right click on the instance > Image and Templates > Create an Image

-----------------------------------

EC2 Instance Store:
------------------
- We have seen how to attach network drives with EC2 instances (EBS).
- EBS volumes are network drives with good but "limited" performance.
- If you need a high-performance hardware disk, use EC2 Instance Store. The EC2 instance is a virtual machine but it is obviously attached to a real hardware servers and some of the servers are attached directly with physical connection to the server. So, a special king of EC2 instance can leverage the storage called EC2 Instance Store which is the name of the Hard Disk attached to the physical server.
- Reasons to use EC2 Instance Store:
	o Better I/O performance
	o Better Thorughput
- EC2 Instance Store lose their storage if they're stopped (ephemeral). That means that the EC2 Instance Store cannot be used as a long term durable place to store our Data. For long term use, EBS is better.
- Good for buffer/cache/scratch data/temporary content.
- Risk of data loss if hardware fails.
- Backups and Replication are your responsibility.

-----------------------------------

EBS Volume Types:
----------------
- EBS Volumes come in 6 types:
	o gp2/gp3 (SSD): General purpose SSD volume that balances price and performance for a wide variety of workloads.
	o io1/io2 (SSD): Highest-performance SSD volume for mission-critical low-latency or high-throughput workloads.
	o st1 (HDD): Low cost HDD volume designed for frequently accessed, throughput-intensive workloads.
	o sc1 (HDD): Lowest cost HDD volume designed for less frequently accessed workloads.
- EBS Volumes are characterized in Size | Throughput | IOPS (I/O Ops Per Sec)
- Only gp2/gp3 and io1/io2 can be used as boot volumes.

General Purpose SSD*:
-------------------
• *Cost effective storage, low-latency
• System boot volumes, Virtual desktops, Development and test environments
• 1 GiB - 16 TiB
• gp3:
	• Baseline of 3,000 IOPS and throughput of 125 MiB/s
	• Can increase IOPS up to 16,000 and throughput up to 1000 MiB/s independently
• gp2:
	• Small gp2 volumes can burst IOPS to 3,000
	• Size of the volume and IOPS are linked, max IOPS is 16,000. This means that if we increase the GiB in the volume, we can get more IOPS, upto 16000. 
	• 3 IOPS per GB, means at 5,334 GB we are at the max IOPS
• *In gp3 we can independently set the IOPS and the throughput. Whereas for gp2 they are linked together.
• Use Cases:
	• Low-Latency interactive apps
	• Development and test environments
• You have provisioned an 8TB gp2 EBS volume and you are running out of IOPS. Then the ways to increase performance are Mount EBS volumes in RAID 0 or Change to an io1 voulme type. 
What we should not do is increase the EBS volume. We know that increasing the volume of gp2 increases the performance(IOPS) but it caps out at 16,000 IOPS or equivalent 5334 GB. 
In this case the IOPS is already capped out, so increasing volume will not change anything.

Provisioned IOPS (PIOPS) SSD*:
----------------------------
• *Critical business applications with sustained IOPS performance
• *Or applications that need more than 16,000 IOPS
• *Great for databases workloads (sensitive to storage perf and consistency)
• io1/io2 (4 GiB - 16 TiB):
	• Max PIOPS: 64,000 for Nitro EC2 instances & 32,000 for other [Nitro instances gives us access to higher number of IOPS (over 32000) with io1/io2. Withou Nitro instance we get 32000 IOPS]
	• Can increase PIOPS independently from storage size [PIOPS - Provosion IOPS.]
	• io2 have more durability and more IOPS per GiB (at the same price as io1)
	• 64,000 is the maximum IOPS you can achieve when you're using EBS io1 or io2 volume types.
• io2 Block Express (4 GiB – 64 TiB):
	• Sub-millisecond latency
	• Max PIOPS: 256,000 with an IOPS:GiB ratio of 1,000:1
• Supports EBS Multi-attach
• Use Cases:
	• io2 Block Express:
		• Workloads that require sub-millisecond latency, and sustained IOPS performance or more than 64,000 IOPS or 1,000 MiB/s of throughput.
	• io1/io2:
		• Workloads that require sustained IOPS performance or more than 16,000 IOPS.
		• I/O-intensive database workloads.

Hard Disk Drives (HDD):
----------------------
• Cannot be a boot volume 
• 125 GiB to 16 TiB 
• Throughput Optimized HDD (st1) 
	• Big Data, Data Warehouses, Log Processing 
	• Max throughput 500 MiB/s – max IOPS 500 
• Cold HDD (sc1) [Archived Data]: 
	• For data that is infrequently accessed 
	• Scenarios where lowest cost is important 
	• Max throughput 250 MiB/s – max IOPS 250
• USe Cases:
	• st1:
		• Big data
		• Data Warehouses
		• Log Processing
	• sc1:
		• Throughput-oriented storage for data that is infrequently accessed.
		• Scenarios where the lowest storage cost is important.

-----------------------------------

EBS Multi-Attach – io1/io2 family:
---------------------------------
• Attach the same EBS volume to multiple EC2 instances in the same AZ
• It is only available for io1 and io2 family.
• This Multi-Attach feature is available only within a specified AZ.
• Each instance has full read & write permissions to the high-performance volume
• Use case:
	• Achieve higher application availability in clustered Linux applications (ex: Teradata)
	• Applications must manage concurrent write operations
• *We can Multi-Attach a EBS volumeto Up to 16 EC2 Instances at a time
• Must use a file system that’s cluster-aware (not XFS, EX4, etc…)

-----------------------------------

EFS – Elastic File System:
-------------------------
• Managed NFS (network file system) that can be mounted on many EC2
• EFS works with EC2 instances in multi-AZ
• Highly available, scalable, expensive (3x gp2), pay per use
• Use cases: content management, web serving, data sharing, Wordpress
• Uses NFSv4.1 protocol
• Uses security group to control access to EFS
• *Compatible with Linux based AMI (not Windows)
• Encryption at rest using KMS
• POSIX file system (~Linux) that has a standard file API
• File system scales automatically, pay-per-use, no capacity planning!
• To use EFS, we must surround it with a Security Group to control the inbound and outbound traffic.
• We connect the same EFS to EC2 instances in multiple AZs.
• When creating a EC2 instance if we choose to attach a EFS file system with it (Need to choose the correct subnet in the Networks settings first), then security groups to access the EFS is sutomatically attached and a user data is ran automatically that mounts the EFS file system to the instance. 
• The security Groups provided by the EC2 Instances also get attached to the EFS File System.
• Two EC2 instances share the same EFS file system if one EFS file system is attached to both of them. So, if one instances makes any changes, the other will also reflect this. [This might cause race condition to occur.]

EFS – Performance & Storage Classes:
-----------------------------------
• EFS Scale
	• 1000s of concurrent NFS clients, 10 GB+ /s throughput
	• Grow to Petabyte-scale network file system, automatically
• Performance Mode (set at EFS creation time)
	• General Purpose (default) – latency-sensitive use cases (web server, CMS, etc…)
	• Max I/O – higher latency, throughput, highly parallel (big data, media processing)
• Throughput Mode
	• Bursting – 1 TB = 50MiB/s + burst of up to 100MiB/s - Throughput that scales with the file system
	• Enhanced:
		• Provisioned – set your throughput regardless of storage size, ex: 1 GiB/s for 1 TB storage - Thorughput fixed at specified amount
		• Elastic – automatically scales throughput up or down based on your workloads
			• Up to 3GiB/s for reads and 1GiB/s for writes
			• *Used for unpredictable workloads

EFS – Storage Classes:
---------------------
• Storage Tiers (lifecycle management feature – move file after N days)
	• Standard: for frequently accessed files
	• Infrequent access (EFS-IA): cost to retrieve files, lower price to store. To enable EFS-IA we must choose a Lifecycle Policy. [Lifecycle policy example: Let's assume we have a file in EFS Standard and if the file is not accessed for more than 60 days then because of the Lifecycle policy we have set, it will be moved to EBS-IA in a different tier and will give a lower cost.]
• Availability and durability
	• Standard (Regional): Multi-AZ, great for prod
	• One Zone: One AZ, great for dev, backup enabled by default, compatible with IA (EFS One Zone-IA)
• Over 90% in cost savings
• In Exam this can be asked: When should you use the EFS file system? What options should you set on your EFS network file system to ensure you validate and comply with the requirements?

-----------------------------------

EBS vs EFS – Elastic Block Storage:
----------------------------------
• EBS volumes…
	• can be attached to only one instance (except multi-attach io1/io2, upto 16 EC2 instances)
	• are locked at the Availability Zone (AZ) level. So, a EBS of one AZ cannot attach to a instance in another AZ.
	• gp2: IO increases if the disk size increases
	• io1: can increase IO independently
• To migrate an EBS volume across AZ
	• Take a snapshot
	• Restore the snapshot to another AZ
	• EBS backups use IO and you shouldn’t run them while your application is handling a lot of traffic, because it may impact the performance.
• Root EBS Volumes of instances get terminated by default if the EC2 instance gets terminated. (you can disable that)

EBS vs EFS – Elastic File System:
--------------------------------
• We can attach it to Mounting 100s of instances across AZ
• EFS share website files (WordPress)
• Only for Linux Instances (POSIX)
• EFS has a higher price point than EBS
• Can leverage EFS-IA for cost savings
• Remember: EFS vs EBS vs Instance Store (Physically attached to EC2 Instance)

-----------------------------------

Notes:
-----
• You are running a high-performance database that requires an IOPS of 310,000 for its underlying storage. Using a EC2 Instance Store is recommended.
• You can run a database on an EC2 instance that uses an Instance Store, but you'll have a problem that the data will be lost if the EC2 instance is stopped (it can be restarted without problems). 
One solution is that you can set up a replication mechanism on another EC2 instance with an Instance Store to have a standby copy. Another solution is to set up backup mechanisms for your data. 
It's all up to you how you want to set up your architecture to validate your requirements. In this use case, it's around IOPS, so we have to choose an EC2 Instance Store.

-----------------------------------